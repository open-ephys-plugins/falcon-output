# autogenerated flatbuffer, see framework at: https://github.com/open-ephys-plugins/falcon-output/blob/main/clients/C%2B%2B/channel.fbs
# modified to fit indexing for python

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ContinuousData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContinuousData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContinuousData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # ContinuousData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContinuousData
    def Samples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ContinuousData
    def SamplesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # ContinuousData
    def SamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ContinuousData
    def SamplesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ContinuousData
    def Stream(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContinuousData
    def NChannels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def NSamples(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def SampleNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ContinuousData
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ContinuousData
    def SampleRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(8)


def ContinuousDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)


def AddSamples(builder, samples): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(samples), 0)


def ContinuousDataAddSamples(builder, samples):
    """This method is deprecated. Please switch to AddSamples."""
    return AddSamples(builder, samples)


def StartSamplesVector(builder, numElems): return builder.StartVector(4, numElems, 4)


def ContinuousDataStartSamplesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSamplesVector(builder, numElems)


def AddStream(builder, stream): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stream), 0)


def ContinuousDataAddStream(builder, stream):
    """This method is deprecated. Please switch to AddStream."""
    return AddStream(builder, stream)


def AddNChannels(builder, nChannels): builder.PrependUint32Slot(2, nChannels, 0)


def ContinuousDataAddNChannels(builder, nChannels):
    """This method is deprecated. Please switch to AddNChannels."""
    return AddNChannels(builder, nChannels)


def AddNSamples(builder, nSamples): builder.PrependUint32Slot(3, nSamples, 0)


def ContinuousDataAddNSamples(builder, nSamples):
    """This method is deprecated. Please switch to AddNSamples."""
    return AddNSamples(builder, nSamples)


def AddSampleNum(builder, sampleNum): builder.PrependUint64Slot(4, sampleNum, 0)


def ContinuousDataAddSampleNum(builder, sampleNum):
    """This method is deprecated. Please switch to AddSampleNum."""
    return AddSampleNum(builder, sampleNum)


def AddTimestamp(builder, timestamp): builder.PrependFloat64Slot(5, timestamp, 0.0)


def ContinuousDataAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)


def AddMessageId(builder, messageId): builder.PrependUint64Slot(6, messageId, 0)


def ContinuousDataAddMessageId(builder, messageId):
    """This method is deprecated. Please switch to AddMessageId."""
    return AddMessageId(builder, messageId)


def AddSampleRate(builder, sampleRate): builder.PrependUint32Slot(7, sampleRate, 0)


def ContinuousDataAddSampleRate(builder, sampleRate):
    """This method is deprecated. Please switch to AddSampleRate."""
    return AddSampleRate(builder, sampleRate)


def End(builder): return builder.EndObject()


def ContinuousDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)